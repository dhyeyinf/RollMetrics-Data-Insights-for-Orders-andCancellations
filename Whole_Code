drop table if exists driver;
CREATE TABLE driver(driver_id integer, reg_date date); 

INSERT INTO driver(driver_id, reg_date) 
 VALUES (1, '2021-01-01'),
        (2, '2021-01-03'),
        (3, '2021-01-08'),
        (4, '2021-01-15');


drop table if exists ingredients;
CREATE TABLE ingredients(ingredients_id integer, ingredients_name varchar(60)); 

INSERT INTO ingredients(ingredients_id, ingredients_name) 
 VALUES (1, 'BBQ Chicken'),
        (2, 'Chilli Sauce'),
        (3, 'Chicken'),
        (4, 'Cheese'),
        (5, 'Kebab'),
        (6, 'Mushrooms'),
        (7, 'Onions'),
        (8, 'Egg'),
        (9, 'Peppers'),
        (10, 'schezwan sauce'),
        (11, 'Tomatoes'),
        (12, 'Tomato Sauce');


drop table if exists rolls;
CREATE TABLE rolls(roll_id integer, roll_name varchar(30)); 

INSERT INTO rolls(roll_id, roll_name) 
 VALUES (1, 'Non Veg Roll'),
        (2, 'Veg Roll');


drop table if exists rolls_recipes;
CREATE TABLE rolls_recipes(roll_id integer, ingredients varchar(24)); 

INSERT INTO rolls_recipes(roll_id, ingredients) 
 VALUES (1, '1,2,3,4,5,6,8,10'),
        (2, '4,6,7,9,11,12');


drop table if exists driver_order;
CREATE TABLE driver_order(order_id integer, driver_id integer, pickup_time datetime, distance VARCHAR(7), duration VARCHAR(10), cancellation VARCHAR(23));
INSERT INTO driver_order(order_id, driver_id, pickup_time, distance, duration, cancellation) 
 VALUES (1, 1, '2021-01-01 18:15:34', '20km', '32 minutes', ''),
        (2, 1, '2021-01-01 19:10:54', '20km', '27 minutes', ''),
        (3, 1, '2021-01-03 00:12:37', '13.4km', '20 mins', 'NaN'),
        (4, 2, '2021-01-04 13:53:03', '23.4', '40', 'NaN'),
        (5, 3, '2021-01-08 21:10:57', '10', '15', 'NaN'),
        (6, 3, null, null, null, 'Cancellation'),
        (7, 2, '2020-01-08 21:30:45', '25km', '25mins', null),
        (8, 2, '2020-01-10 00:15:02', '23.4 km', '15 minute', null),
        (9, 2, null, null, null, 'Customer Cancellation'),
        (10, 1, '2020-01-11 18:50:20', '10km', '10minutes', null);


drop table if exists customer_orders;
CREATE TABLE customer_orders(order_id integer, customer_id integer, roll_id integer, not_include_items VARCHAR(4), extra_items_included VARCHAR(4), order_date datetime);
INSERT INTO customer_orders(order_id, customer_id, roll_id, not_include_items, extra_items_included, order_date)
values (1, 101, 1, '', '', '2021-01-01 18:05:02'),
       (2, 101, 1, '', '', '2021-01-01 19:00:52'),
       (3, 102, 1, '', '', '2021-01-02 23:51:23'),
       (3, 102, 2, '', 'NaN', '2021-01-02 23:51:23'),
       (4, 103, 1, '4', '', '2021-01-04 13:23:46'),
       (4, 103, 1, '4', '', '2021-01-04 13:23:46'),
       (4, 103, 2, '4', '', '2021-01-04 13:23:46'),
       (5, 104, 1, null, '1', '2021-01-08 21:00:29'),
       (6, 101, 2, null, null, '2021-01-08 21:03:13'),
       (7, 105, 2, null, '1', '2021-01-08 21:20:29'),
       (8, 102, 1, null, null, '2021-01-09 23:54:33'),
       (9, 103, 1, '4', '1,5', '2021-01-10 11:22:59'),
       (10, 104, 1, null, null, '2021-01-11 18:34:49'),
       (10, 104, 1, '2,6', '1,4', '2021-01-11 18:34:49');

-- Verification queries
select * from customer_orders;
select * from driver_order;
select * from ingredients;
select * from driver;
select * from rolls;
select * from rolls_recipes;

-- How many rolls werer ordered?
SELECT count(roll_id) FROM customer_orders;

--How many unique customer orders were made?
SELECT count(DISTINCT customer_id) FROM customer_orders;

--How many succesfull orders were delivered by each driver?
SELECT driver_id, count(DISTINCT order_id) FROM driver_order WHERE cancellation not in ('Cancellation','Customer Cancellation') GROUP BY driver_id;

--How many each type of roll was delivered?

-- first cleaning data as 'null' values where not recognised

SELECT *,case WHEN cancellation in ('Cancellation','Customer Cancellation') then 'c' ELSE 'nc' end as order_cancel_details FROM driver_order;

SELECT * FROM
(SELECT *,case WHEN cancellation in ('Cancellation','Customer Cancellation') then 'c' ELSE 'nc' end as order_cancel_details FROM driver_order)a WHERE order_cancel_details='nc';


SELECT * FROM customer_orders where order_id in(
SELECT order_id FROM
(SELECT *,case WHEN cancellation in ('Cancellation','Customer Cancellation') then 'c' ELSE 'nc' end as order_cancel_details FROM driver_order)a WHERE order_cancel_details='nc');

--final query
SELECT roll_id, count(roll_id)
FROM customer_orders where order_id in(
SELECT order_id FROM
(SELECT *,case WHEN cancellation in ('Cancellation','Customer Cancellation') then 'c' ELSE 'nc' end as order_cancel_details FROM driver_order)a WHERE order_cancel_details='nc') GROUP BY roll_id;

--How many veg and non veg rolls where ordered by each of the customer?

SELECT a.*,b.roll_name FROM (
SELECT customer_id,roll_id, count(roll_id) FROM customer_orders GROUP BY customer_id,roll_id)a INNER JOIN rolls b on a.roll_id=b.roll_id;

--Maximun nuber of rolls deivered on single order?

SELECT * from customer_orders WHERE order_id in(
SELECT order_id from
(SELECT *,case WHEN cancellation in ('Cancellation','Customer Cancellation') then 'c' ELSE 'nc' end as order_cancel_details FROM driver_order)a WHERE order_cancel_details='nc')

SELECT order_id , count(roll_id) FROM
(SELECT * from customer_orders WHERE order_id in(
SELECT order_id from
(SELECT *,case WHEN cancellation in ('Cancellation','Customer Cancellation') then 'c' ELSE 'nc' end as order_cancel_details FROM driver_order)a WHERE order_cancel_details='nc'))b GROUP BY order_id;

--final query

SELECT * 
FROM (
    SELECT *, RANK() OVER (ORDER BY cnt DESC) rnk 
    FROM (
        SELECT order_id, COUNT(roll_id) AS cnt 
        FROM (
            SELECT * 
            FROM customer_orders 
            WHERE order_id IN (
                SELECT order_id 
                FROM (
                    SELECT *, 
                        CASE 
                            WHEN cancellation IN ('Cancellation', 'Customer Cancellation') THEN 'c' 
                            ELSE 'nc' 
                        END AS order_cancel_details 
                    FROM driver_order
                ) a 
                WHERE order_cancel_details = 'nc'
            )
        ) b 
        GROUP BY order_id
    ) c
) d 
WHERE rnk = 1;

--7) for each customer how many delivered rolls had atleast one change and how many had no change?

--creating temporary table


WITH temp_cust_orders AS (
    SELECT 
        order_id,
        customer_id,
        roll_id,
        CASE 
            WHEN not_include_items IS NULL OR not_include_items = "" THEN '0' 
            ELSE not_include_items 
        END AS new_not_include_items,
        CASE 
            WHEN extra_items_included IS NULL OR extra_items_included = "" OR extra_items_included = 'NaN' THEN '0' 
            ELSE extra_items_included 
        END AS new_extra_items_included,
        order_date 
    FROM customer_orders
),
temp_driver_orders AS (
    SELECT
        order_id,
        driver_id,
        pickup_time,
        distance,
        duration,
        CASE
            WHEN cancellation IN ('Cancellation', 'Customer Cancellation') THEN 0 
            ELSE 1 
        END AS new_cancellation
    FROM driver_order
)
select customer_id,chg_or_nochg,COUNT(order_id) FROM
(
SELECT *, 
       CASE 
           WHEN new_not_include_items = '0' AND new_extra_items_included = '0' THEN 'No Change' 
           ELSE 'Change' 
       END AS chg_or_nochg
FROM temp_cust_orders 
WHERE order_id IN (
    SELECT order_id 
    FROM temp_driver_orders 
    WHERE new_cancellation != 0
))a GROUP BY customer_id,chg_or_nochg ;

-- How many rolls were delivered that had both exclusion and extras?
WITH temp_cust_orders AS (
    SELECT 
        order_id,
        customer_id,
        roll_id,
        CASE 
            WHEN not_include_items IS NULL OR not_include_items = "" THEN '0' 
            ELSE not_include_items 
        END AS new_not_include_items,
        CASE 
            WHEN extra_items_included IS NULL OR extra_items_included = "" OR extra_items_included = 'NaN' THEN '0' 
            ELSE extra_items_included 
        END AS new_extra_items_included,
        order_date 
    FROM customer_orders
),
temp_driver_orders AS (
    SELECT
        order_id,
        driver_id,
        pickup_time,
        distance,
        duration,
        CASE
            WHEN cancellation IN ('Cancellation', 'Customer Cancellation') THEN 0 
            ELSE 1 
        END AS new_cancellation
    FROM driver_order
)
SELECT chg_or_nochg , COUNT(chg_or_nochg) FROM
(
SELECT *, 
       CASE 
           WHEN new_not_include_items != '0' AND new_extra_items_included != '0' THEN 'both inc and exc' 
           ELSE 'only one' 
       END AS chg_or_nochg
FROM temp_cust_orders 
WHERE order_id IN (
    SELECT order_id 
    FROM temp_driver_orders 
    WHERE new_cancellation != 0
))a GROUP BY chg_or_nochg;

--What was total no of rolls ordered for each hour of the day?

SELECT 
    *, 
    CONCAT(CAST(HOUR(order_date) AS CHAR), '-', 
           CAST(DATE_ADD(DATE(order_date), INTERVAL 1 DAY) AS CHAR)) AS hrs_bucket
FROM customer_orders;

--What was the numbers of orders for each day of the week?

SELECT dow, COUNT(DISTINCT `order_id`) AS distinct_orders
FROM (
    SELECT *, DAYNAME(order_date) AS dow 
    FROM customer_orders
) AS a
GROUP BY dow;

-- Roll Metrics
-- driver and customer experience
-- ingredients optimazation
-- Pricing and ratings

--Avearge time in minutes it took for each driver to arrive at faasos HQ to pickup order?

SELECT 
    a.order_id, 
    a.customer_id, 
    a.roll_id, 
    a.not_include_items, 
    a.extra_items_included, 
    a.order_date, 
    b.driver_id, 
    b.pickup_time, 
    b.distance, 
    b.duration, 
    b.cancellation, 
    TIMESTAMPDIFF(MINUTE, a.order_date , b.pickup_time) AS diff_minutes 
FROM customer_orders a 
INNER JOIN driver_order b 
ON a.order_id = b.order_id 
WHERE b.pickup_time IS NOT NULL;

-- Is there any relationship between the number of rolls and how long the order takes to prepare?
SELECT order_id,count(roll_id),sum(diff_minutes)/count(roll_id) FROM
(SELECT 
    a.order_id, 
    a.customer_id, 
    a.roll_id, 
    a.not_include_items, 
    a.extra_items_included, 
    a.order_date, 
    b.driver_id, 
    b.pickup_time, 
    b.distance, 
    b.duration, 
    b.cancellation, 
    TIMESTAMPDIFF(MINUTE, a.order_date, b.pickup_time) AS diff_minutes 
FROM customer_orders a 
INNER JOIN driver_order b 
ON a.order_id = b.order_id 
WHERE b.pickup_time IS NOT NULL)a
GROUP BY order_id;


-- Data Cleaning

SELECT 
    customer_id,
    SUM(distance) / COUNT(order_id) AS avg_distance_per_order
FROM (
    SELECT 
        a.order_id, 
        a.customer_id, 
        a.roll_id,
        a.not_include_items, 
        a.extra_items_included, 
        a.order_date, 
        b.driver_id, 
        b.pickup_time, 
        CAST(TRIM(REPLACE(LOWER(b.distance), 'km', '')) AS DECIMAL(4,2)) AS distance,
        b.cancellation, 
        TIMESTAMPDIFF(MINUTE, a.order_date, b.pickup_time) AS diff_minutes,
        ROW_NUMBER() OVER (PARTITION BY a.order_id ORDER BY TIMESTAMPDIFF(MINUTE, a.order_date, b.pickup_time)) AS rnk
    FROM customer_orders a 
    INNER JOIN driver_order b 
    ON a.order_id = b.order_id 
    WHERE b.pickup_time IS NOT NULL
) subquery
WHERE rnk = 1
GROUP BY customer_id;


-- What is average distance travelled for each customer?
SELECT 
    customer_id,
    SUM(distance) / COUNT(order_id) AS avg_distance_per_order
FROM (
    SELECT 
        a.order_id, 
        a.customer_id, 
        a.roll_id,
        a.not_include_items, 
        a.extra_items_included, 
        a.order_date, 
        b.driver_id, 
        b.pickup_time, 
        CAST(TRIM(REPLACE(LOWER(b.distance), 'km', '')) AS DECIMAL(4,2)) AS distance,
        b.cancellation, 
        TIMESTAMPDIFF(MINUTE, a.order_date, b.pickup_time) AS diff_minutes,
        ROW_NUMBER() OVER (PARTITION BY a.order_id ORDER BY TIMESTAMPDIFF(MINUTE, a.order_date, b.pickup_time)) AS rnk
    FROM customer_orders a 
    INNER JOIN driver_order b 
    ON a.order_id = b.order_id 
    WHERE b.pickup_time IS NOT NULL
) subquery
WHERE rnk = 1
GROUP BY customer_id;

-- What is difference between the longest and the shortest delivery times for all orders?

SELECT MAX(duration) - MIN(duration) AS diff 
FROM (
    SELECT 
        CAST(
            CASE 
                WHEN duration LIKE '%min%' 
                THEN LEFT(duration, LOCATE('m', duration) - 1) 
                ELSE duration 
            END AS UNSIGNED
        ) AS duration 
    FROM driver_order 
    WHERE duration IS NOT NULL
) a;

-- what is succesfull delivery percentage for each driver?


succesfull delivery percentage(sdp)=total order succesfully delivered/total orders taken


SELECT driver_id, s/t cancelled_per FROM
(SELECT driver_id , sum(can_per) s,count(driver_id)t FROM
(
    SELECT driver_id , CASE when LOWER(cancellation) LIKE '%cancel%' THEN 0 else 1 end as can_per FROM driver_order
)a GROUP BY driver_id)b;
